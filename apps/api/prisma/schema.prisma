generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {

  // About the user
  id                  String          @unique @id // Supertokens Auth ID
  name                String?
  gender              Gender
  bio                 String?
  avatar              String
  tshirtSize          TShirtSize?
  githubID            String          @unique

  // Contact information
  email               String          @unique  
  mobile              String?
  city                String?
  country             String?

  emergencyContact    String?
  emergencyContactNo  String?

  // Verification Status
  isEmailVerified     Boolean         @default(false)
  isMobileVerified    Boolean         @default(false)

  //User Links
  website             String?
  twitter             String?
  linkedin            String?
  dribbble            String?
  behance             String?
  github              String?
  instagram           String?
  stackoverflow       String?

  work_experience     Json[]
  education           Json[]

  // User Skills
  skills              Skill[]

  // User Organizations
  organizations       Member[]

  // User Hackathons
  hackathons          HackathonProfile[]
}

model Hackathon {
  id                  String          @unique @id
  name                String
  about               String
  mode                Mode
  prizes              Json[]

  // Publicity
  isListed            Boolean         @default(false)
  isPublished         Boolean         @default(false)

  // Dates
  timeZone            String
  applicationStart    DateTime
  applicationEnd      DateTime
  hackathonStart      DateTime
  hackathonEnd        DateTime

  // Contact information
  email               String
  codeOfConduct       String

  // Brand
  logo                String
  banner              String
  icon                String
  color               String

  // Team Details
  maxTeamSize            Int
  minTeamSize            Int

  // Website Links
  website             String
  instagram           String?
  twitter             String?
  discord             String?
  slack               String?
  telegram            String?
  facebook            String?

  // Venue Details
  venueName           String
  city                String
  address             String

  faqs                Json[]

  customFields        Json[]

  // Theme
  theme               Theme[]

  // Hackathon Participants
  participants        HackathonProfile[]

  // Hackathon Sponsors
  sponsors            Sponsor[]
}

model HackathonProfile {
  userId              String
  user                User            @relation(fields: [userId], references: [email])

  hackathonId         String
  hackathon           Hackathon       @relation(fields: [hackathonId], references: [id])

  teamId              String?
  team                Team?           @relation(fields: [teamId], references: [id])

  customFields        Json[]

  applicationStatus   ApplicationStatus @default(PENDING)
  rsvpStatus          RSVPStatus        @default(NO)

  isTeamLeader        Boolean         @default(false)
  @@unique([userId, hackathonId])
  @@id([userId, hackathonId])
}

model Team {
  id                  String          @unique @id
  key                 String          @unique
  name                String
  members             HackathonProfile[]

  submissionLink      String?
}

model Skill {
  id                  String          @unique @id
  name                String
  users               User[]
}

model Theme {
  id                  String          @unique @id
  name                String
  description         String
  hackathons          Hackathon[]
}

model Member{
  userId              String
  user                User            @relation(fields: [userId], references: [email])

  organizationId      String
  organization        Organization    @relation(fields: [organizationId], references: [id])
  role                Role

  @@unique([userId, organizationId])
  @@id([userId, organizationId])
}

model Sponsor {
  id                  String          @unique @id
  name                String
  logo                String
  website             String
  tier                Tier
  description         String
  hackathonId         String
  hackathon           Hackathon       @relation(fields: [hackathonId], references: [id])
}

model Organization {
  id                  String          @unique @id
  name                String
  avatar              String
  bio                 String?

  // Contact information
  email               String

  // External Links
  website             String?
  twitter             String?
  linkedin            String?
  instagram           String?
  github              String?

  // Verification Status
  isEmailVerified     Boolean         @default(false)
  isVerified          Boolean         @default(false)

  // Organization Members
  members             Member[]
  invites             OrgInvite[]
}

model OrgInvite {
  id                  String          @unique @id
  email               String
  organizationId      String
  organization        Organization    @relation(fields: [organizationId], references: [id])
  role                Role
}


enum Gender {
  MALE
  FEMALE
  TRANSGENDER
  NON_BINARY
  PREFER_NOT_TO_SAY
}

enum TShirtSize {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Role {
  Admin
  Volunteer
}

enum RSVPStatus {
  YES
  NO
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  ACCEPTED_MAIL_SENT
  REJECTED
  REJECTED_MAIL_SENT
}

enum Mode {
  ONLINE
  OFFLINE
  HYBRID
}

enum Tier {
  PLATINUM
  GOLD
  SILVER
  BRONZE
}